<instance format="XCSP3" type="COP">
  <variables>
    <array id="cpu_loads" size="[4]"> 0..1000 </array>
    <array id="cost" size="[14]"> 0..10000 </array>
    <var id="communication_cost"> 0..10000 </var>
    <var id="objective"> 0..10000 </var>
    <array id="flow_processor" size="[28]"> 0..3 </array>
    <array id="comm_full" size="[12]"> 0..30 </array>
    <array id="flow_from_processor" size="[4]"> 0..150 </array>
    <array id="cc" size="[4]"> 0..140000 </array>
    <array id="flows" size="[14][20]"> 0..72 </array>
    <array id="total_flow" size="[124]"> 0..72 </array>
  </variables>
  <constraints>
    <group note="to select processor and not divide flow on incoming and outgoing streams">
      <count>
        <list> %... </list>
        <values> 0 </values>
        <condition> (eq,3) </condition>
      </count>
      <args> flows[0][0..3] </args>
      <args> flows[1][0..3] </args>
      <args> flows[2][0..3] </args>
      <args> flows[3][0..3] </args>
      <args> flows[4][0..3] </args>
      <args> flows[5][0..3] </args>
      <args> flows[6][0..3] </args>
      <args> flows[7][0..3] </args>
      <args> flows[8][0..3] </args>
      <args> flows[9][0..3] </args>
      <args> flows[10][0..3] </args>
      <args> flows[11][0..3] </args>
      <args> flows[12][0..3] </args>
      <args> flows[13][0..3] </args>
    </group>
    <group>
      <count>
        <list> %... </list>
        <values> 0 </values>
        <condition> (eq,3) </condition>
      </count>
      <args> flows[0][16..19] </args>
      <args> flows[1][16..19] </args>
      <args> flows[2][16..19] </args>
      <args> flows[3][16..19] </args>
      <args> flows[4][16..19] </args>
      <args> flows[5][16..19] </args>
      <args> flows[6][16..19] </args>
      <args> flows[7][16..19] </args>
      <args> flows[8][16..19] </args>
      <args> flows[9][16..19] </args>
      <args> flows[10][16..19] </args>
      <args> flows[11][16..19] </args>
      <args> flows[12][16..19] </args>
      <args> flows[13][16..19] </args>
    </group>
    <block note="flow constraints">
      <flow>
        <list> flows[0][] </list>
        <balance> 0 0 0 0 36 -36 </balance>
        <arcs> (5,1)(5,2)(5,3)(5,4)(1,2)(1,3)(1,4)(2,1)(2,3)(2,4)(3,1)(3,2)(3,4)(4,1)(4,2)(4,3)(1,6)(2,6)(3,6)(4,6) </arcs>
        <weights> 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 </weights>
        <condition> (eq,cost[0]) </condition>
      </flow>
      <group>
        <flow>
          <list> %... </list>
          <balance> 0 0 0 0 72 -72 </balance>
          <arcs> (5,1)(5,2)(5,3)(5,4)(1,2)(1,3)(1,4)(2,1)(2,3)(2,4)(3,1)(3,2)(3,4)(4,1)(4,2)(4,3)(1,6)(2,6)(3,6)(4,6) </arcs>
          <weights> 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 </weights>
          <condition> (eq,%0) </condition>
        </flow>
        <args> cost[1] flows[1][] </args>
        <args> cost[2] flows[2][] </args>
        <args> cost[3] flows[3][] </args>
        <args> cost[4] flows[4][] </args>
        <args> cost[5] flows[5][] </args>
        <args> cost[6] flows[6][] </args>
        <args> cost[7] flows[7][] </args>
        <args> cost[8] flows[8][] </args>
        <args> cost[9] flows[9][] </args>
        <args> cost[10] flows[10][] </args>
        <args> cost[11] flows[11][] </args>
        <args> cost[12] flows[12][] </args>
        <args> cost[13] flows[13][] </args>
      </group>
    </block>
    <flow note="global flow">
      <list> total_flow[] </list>
      <balance> 0 0 0 0 36 72 72 72 72 72 72 72 72 72 72 72 72 72 -36 -72 -72 -72 -72 -72 -72 -72 -72 -72 -72 -72 -72 -72 </balance>
      <arcs> (5,1)(5,2)(5,3)(5,4)(6,1)(6,2)(6,3)(6,4)(7,1)(7,2)(7,3)(7,4)(8,1)(8,2)(8,3)(8,4)(9,1)(9,2)(9,3)(9,4)(10,1)(10,2)(10,3)(10,4)(11,1)(11,2)(11,3)(11,4)(12,1)(12,2)(12,3)(12,4)(13,1)(13,2)(13,3)(13,4)(14,1)(14,2)(14,3)(14,4)(15,1)(15,2)(15,3)(15,4)(16,1)(16,2)(16,3)(16,4)(17,1)(17,2)(17,3)(17,4)(18,1)(18,2)(18,3)(18,4)(1,2)(1,3)(1,4)(2,1)(2,3)(2,4)(3,1)(3,2)(3,4)(4,1)(4,2)(4,3)(1,19)(2,19)(3,19)(4,19)(1,20)(2,20)(3,20)(4,20)(1,21)(2,21)(3,21)(4,21)(1,22)(2,22)(3,22)(4,22)(1,23)(2,23)(3,23)(4,23)(1,24)(2,24)(3,24)(4,24)(1,25)(2,25)(3,25)(4,25)(1,26)(2,26)(3,26)(4,26)(1,27)(2,27)(3,27)(4,27)(1,28)(2,28)(3,28)(4,28)(1,29)(2,29)(3,29)(4,29)(1,30)(2,30)(3,30)(4,30)(1,31)(2,31)(3,31)(4,31)(1,32)(2,32)(3,32)(4,32) </arcs>
      <weights> 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 </weights>
      <condition> (eq,communication_cost) </condition>
    </flow>
    <group note="flow for communications between processors for the combined network flow; must be the same as sum of separate flows">
      <sum>
        <list> %... </list>
        <condition> (le,%0) </condition>
      </sum>
      <args> comm_full[0] flows[][4] </args>
      <args> comm_full[1] flows[][5] </args>
      <args> comm_full[2] flows[][6] </args>
      <args> comm_full[3] flows[][7] </args>
      <args> comm_full[4] flows[][8] </args>
      <args> comm_full[5] flows[][9] </args>
      <args> comm_full[6] flows[][10] </args>
      <args> comm_full[7] flows[][11] </args>
      <args> comm_full[8] flows[][12] </args>
      <args> comm_full[9] flows[][13] </args>
      <args> comm_full[10] flows[][14] </args>
      <args> comm_full[11] flows[][15] </args>
    </group>
    <group note="constraint %% computes processors' load">
      <intension> iff(ne(%0,0),eq(%1,%2)) </intension>
      <args> flows[0][0] flow_processor[0] 0 </args>
      <args> flows[0][1] flow_processor[0] 1 </args>
      <args> flows[0][2] flow_processor[0] 2 </args>
      <args> flows[0][3] flow_processor[0] 3 </args>
      <args> flows[1][0] flow_processor[1] 0 </args>
      <args> flows[1][1] flow_processor[1] 1 </args>
      <args> flows[1][2] flow_processor[1] 2 </args>
      <args> flows[1][3] flow_processor[1] 3 </args>
      <args> flows[2][0] flow_processor[2] 0 </args>
      <args> flows[2][1] flow_processor[2] 1 </args>
      <args> flows[2][2] flow_processor[2] 2 </args>
      <args> flows[2][3] flow_processor[2] 3 </args>
      <args> flows[3][0] flow_processor[3] 0 </args>
      <args> flows[3][1] flow_processor[3] 1 </args>
      <args> flows[3][2] flow_processor[3] 2 </args>
      <args> flows[3][3] flow_processor[3] 3 </args>
      <args> flows[4][0] flow_processor[4] 0 </args>
      <args> flows[4][1] flow_processor[4] 1 </args>
      <args> flows[4][2] flow_processor[4] 2 </args>
      <args> flows[4][3] flow_processor[4] 3 </args>
      <args> flows[5][0] flow_processor[5] 0 </args>
      <args> flows[5][1] flow_processor[5] 1 </args>
      <args> flows[5][2] flow_processor[5] 2 </args>
      <args> flows[5][3] flow_processor[5] 3 </args>
      <args> flows[6][0] flow_processor[6] 0 </args>
      <args> flows[6][1] flow_processor[6] 1 </args>
      <args> flows[6][2] flow_processor[6] 2 </args>
      <args> flows[6][3] flow_processor[6] 3 </args>
      <args> flows[7][0] flow_processor[7] 0 </args>
      <args> flows[7][1] flow_processor[7] 1 </args>
      <args> flows[7][2] flow_processor[7] 2 </args>
      <args> flows[7][3] flow_processor[7] 3 </args>
      <args> flows[8][0] flow_processor[8] 0 </args>
      <args> flows[8][1] flow_processor[8] 1 </args>
      <args> flows[8][2] flow_processor[8] 2 </args>
      <args> flows[8][3] flow_processor[8] 3 </args>
      <args> flows[9][0] flow_processor[9] 0 </args>
      <args> flows[9][1] flow_processor[9] 1 </args>
      <args> flows[9][2] flow_processor[9] 2 </args>
      <args> flows[9][3] flow_processor[9] 3 </args>
      <args> flows[10][0] flow_processor[10] 0 </args>
      <args> flows[10][1] flow_processor[10] 1 </args>
      <args> flows[10][2] flow_processor[10] 2 </args>
      <args> flows[10][3] flow_processor[10] 3 </args>
      <args> flows[11][0] flow_processor[11] 0 </args>
      <args> flows[11][1] flow_processor[11] 1 </args>
      <args> flows[11][2] flow_processor[11] 2 </args>
      <args> flows[11][3] flow_processor[11] 3 </args>
      <args> flows[12][0] flow_processor[12] 0 </args>
      <args> flows[12][1] flow_processor[12] 1 </args>
      <args> flows[12][2] flow_processor[12] 2 </args>
      <args> flows[12][3] flow_processor[12] 3 </args>
      <args> flows[13][0] flow_processor[13] 0 </args>
      <args> flows[13][1] flow_processor[13] 1 </args>
      <args> flows[13][2] flow_processor[13] 2 </args>
      <args> flows[13][3] flow_processor[13] 3 </args>
    </group>
    <group>
      <intension> iff(ne(%0,0),eq(%1,%2)) </intension>
      <args> flows[0][16] flow_processor[14] 0 </args>
      <args> flows[0][17] flow_processor[14] 1 </args>
      <args> flows[0][18] flow_processor[14] 2 </args>
      <args> flows[0][19] flow_processor[14] 3 </args>
      <args> flows[1][16] flow_processor[15] 0 </args>
      <args> flows[1][17] flow_processor[15] 1 </args>
      <args> flows[1][18] flow_processor[15] 2 </args>
      <args> flows[1][19] flow_processor[15] 3 </args>
      <args> flows[2][16] flow_processor[16] 0 </args>
      <args> flows[2][17] flow_processor[16] 1 </args>
      <args> flows[2][18] flow_processor[16] 2 </args>
      <args> flows[2][19] flow_processor[16] 3 </args>
      <args> flows[3][16] flow_processor[17] 0 </args>
      <args> flows[3][17] flow_processor[17] 1 </args>
      <args> flows[3][18] flow_processor[17] 2 </args>
      <args> flows[3][19] flow_processor[17] 3 </args>
      <args> flows[4][16] flow_processor[18] 0 </args>
      <args> flows[4][17] flow_processor[18] 1 </args>
      <args> flows[4][18] flow_processor[18] 2 </args>
      <args> flows[4][19] flow_processor[18] 3 </args>
      <args> flows[5][16] flow_processor[19] 0 </args>
      <args> flows[5][17] flow_processor[19] 1 </args>
      <args> flows[5][18] flow_processor[19] 2 </args>
      <args> flows[5][19] flow_processor[19] 3 </args>
      <args> flows[6][16] flow_processor[20] 0 </args>
      <args> flows[6][17] flow_processor[20] 1 </args>
      <args> flows[6][18] flow_processor[20] 2 </args>
      <args> flows[6][19] flow_processor[20] 3 </args>
      <args> flows[7][16] flow_processor[21] 0 </args>
      <args> flows[7][17] flow_processor[21] 1 </args>
      <args> flows[7][18] flow_processor[21] 2 </args>
      <args> flows[7][19] flow_processor[21] 3 </args>
      <args> flows[8][16] flow_processor[22] 0 </args>
      <args> flows[8][17] flow_processor[22] 1 </args>
      <args> flows[8][18] flow_processor[22] 2 </args>
      <args> flows[8][19] flow_processor[22] 3 </args>
      <args> flows[9][16] flow_processor[23] 0 </args>
      <args> flows[9][17] flow_processor[23] 1 </args>
      <args> flows[9][18] flow_processor[23] 2 </args>
      <args> flows[9][19] flow_processor[23] 3 </args>
      <args> flows[10][16] flow_processor[24] 0 </args>
      <args> flows[10][17] flow_processor[24] 1 </args>
      <args> flows[10][18] flow_processor[24] 2 </args>
      <args> flows[10][19] flow_processor[24] 3 </args>
      <args> flows[11][16] flow_processor[25] 0 </args>
      <args> flows[11][17] flow_processor[25] 1 </args>
      <args> flows[11][18] flow_processor[25] 2 </args>
      <args> flows[11][19] flow_processor[25] 3 </args>
      <args> flows[12][16] flow_processor[26] 0 </args>
      <args> flows[12][17] flow_processor[26] 1 </args>
      <args> flows[12][18] flow_processor[26] 2 </args>
      <args> flows[12][19] flow_processor[26] 3 </args>
      <args> flows[13][16] flow_processor[27] 0 </args>
      <args> flows[13][17] flow_processor[27] 1 </args>
      <args> flows[13][18] flow_processor[27] 2 </args>
      <args> flows[13][19] flow_processor[27] 3 </args>
    </group>
    <binPacking>
      <list> flow_processor[] </list>
      <sizes> 38 38 37 0 18 0x9 37 37 0 18 27 0 1 1 4 4 3 3 933 933 </sizes>
      <conditions> (eq,cpu_loads[0])(eq,cpu_loads[1])(eq,cpu_loads[2])(eq,cpu_loads[3]) </conditions>
    </binPacking>
    <group>
      <sum>
        <list> %... </list>
        <condition> (eq,%0) </condition>
      </sum>
      <args> cc[0] mul(eq(flow_processor[0],0),cost[0]) mul(eq(flow_processor[0],0),cost[1]) mul(eq(flow_processor[1],0),cost[2]) mul(eq(flow_processor[3],0),cost[3]) mul(eq(flow_processor[2],0),cost[4]) mul(eq(flow_processor[4],0),cost[5]) mul(eq(flow_processor[5],0),cost[6]) mul(eq(flow_processor[5],0),cost[7]) mul(eq(flow_processor[6],0),cost[8]) mul(eq(flow_processor[10],0),cost[9]) mul(eq(flow_processor[7],0),cost[10]) mul(eq(flow_processor[11],0),cost[11]) mul(eq(flow_processor[8],0),cost[12]) mul(eq(flow_processor[12],0),cost[13]) </args>
      <args> cc[1] mul(eq(flow_processor[0],1),cost[0]) mul(eq(flow_processor[0],1),cost[1]) mul(eq(flow_processor[1],1),cost[2]) mul(eq(flow_processor[3],1),cost[3]) mul(eq(flow_processor[2],1),cost[4]) mul(eq(flow_processor[4],1),cost[5]) mul(eq(flow_processor[5],1),cost[6]) mul(eq(flow_processor[5],1),cost[7]) mul(eq(flow_processor[6],1),cost[8]) mul(eq(flow_processor[10],1),cost[9]) mul(eq(flow_processor[7],1),cost[10]) mul(eq(flow_processor[11],1),cost[11]) mul(eq(flow_processor[8],1),cost[12]) mul(eq(flow_processor[12],1),cost[13]) </args>
      <args> cc[2] mul(eq(flow_processor[0],2),cost[0]) mul(eq(flow_processor[0],2),cost[1]) mul(eq(flow_processor[1],2),cost[2]) mul(eq(flow_processor[3],2),cost[3]) mul(eq(flow_processor[2],2),cost[4]) mul(eq(flow_processor[4],2),cost[5]) mul(eq(flow_processor[5],2),cost[6]) mul(eq(flow_processor[5],2),cost[7]) mul(eq(flow_processor[6],2),cost[8]) mul(eq(flow_processor[10],2),cost[9]) mul(eq(flow_processor[7],2),cost[10]) mul(eq(flow_processor[11],2),cost[11]) mul(eq(flow_processor[8],2),cost[12]) mul(eq(flow_processor[12],2),cost[13]) </args>
      <args> cc[3] mul(eq(flow_processor[0],3),cost[0]) mul(eq(flow_processor[0],3),cost[1]) mul(eq(flow_processor[1],3),cost[2]) mul(eq(flow_processor[3],3),cost[3]) mul(eq(flow_processor[2],3),cost[4]) mul(eq(flow_processor[4],3),cost[5]) mul(eq(flow_processor[5],3),cost[6]) mul(eq(flow_processor[5],3),cost[7]) mul(eq(flow_processor[6],3),cost[8]) mul(eq(flow_processor[10],3),cost[9]) mul(eq(flow_processor[7],3),cost[10]) mul(eq(flow_processor[11],3),cost[11]) mul(eq(flow_processor[8],3),cost[12]) mul(eq(flow_processor[12],3),cost[13]) </args>
    </group>
    <maximum>
      <list> add(cpu_loads[0],cc[0]) add(cpu_loads[1],cc[1]) add(cpu_loads[2],cc[2]) add(cpu_loads[3],cc[3]) </list>
      <condition> (eq,objective) </condition>
    </maximum>
    <group note="flow out from each processor - [flow_from_processor[i] == (0 if len(flowing[i]) == 0 else Sum(flows[j, n] for j, n in flowing[i])) for i in range(k)],">
      <sum>
        <list> %... </list>
        <condition> (le,%0) </condition>
      </sum>
      <args> flow_from_processor[0] flows[][4..6] </args>
      <args> flow_from_processor[1] flows[][7..9] </args>
      <args> flow_from_processor[2] flows[][10..12] </args>
      <args> flow_from_processor[3] flows[][13..15] </args>
    </group>
    <group note="constraints on flow_processors; to be the same if they are the same as source or sink">
      <intension> eq(%0,%1) </intension>
      <args> flow_processor[0] flow_processor[1] </args>
      <args> flow_processor[6] flow_processor[7] </args>
    </group>
    <group>
      <intension> eq(%0,%1) </intension>
      <args> flow_processor[2] flow_processor[14] </args>
      <args> flow_processor[3] flow_processor[15] </args>
      <args> flow_processor[3] flow_processor[16] </args>
      <args> flow_processor[5] flow_processor[17] </args>
      <args> flow_processor[6] flow_processor[18] </args>
      <args> flow_processor[6] flow_processor[19] </args>
      <args> flow_processor[7] flow_processor[18] </args>
      <args> flow_processor[7] flow_processor[19] </args>
      <args> flow_processor[8] flow_processor[20] </args>
      <args> flow_processor[9] flow_processor[21] </args>
      <args> flow_processor[10] flow_processor[22] </args>
      <args> flow_processor[11] flow_processor[23] </args>
      <args> flow_processor[12] flow_processor[24] </args>
      <args> flow_processor[13] flow_processor[25] </args>
    </group>
    <group>
      <intension> eq(%0,%1) </intension>
      <args> flow_processor[15] flow_processor[16] </args>
      <args> flow_processor[18] flow_processor[19] </args>
    </group>
  </constraints>
  <objectives>
    <minimize> objective </minimize>
  </objectives>
</instance>
